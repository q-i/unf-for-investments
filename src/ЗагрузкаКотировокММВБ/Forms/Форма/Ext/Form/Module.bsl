&НаКлиенте
Процедура ЗагрузитьССайтаРБК(Команда)
	
	Дата1 = Период.ДатаНачала;
	Дата2 = Период.ДатаОкончания;
	
	// http://export.rbc.ru/free/micex.0/free.fcgi?period=DAILY&tickers=NULL&d1=01&m1=08&y1=2017&d2=10&m2=08&y2=2017&lastdays=9&separator=%2C&data_format=EXCEL&header=1
	
	Сервер = "export.rbc.ru";
	АдресСтраницы = "/free/micex.0/free.fcgi?period=DAILY&tickers=[ТИКЕР]&d1=[ДД1]&m1=[ММ1]&y1=[ГГГГ1]&d2=[ДД2]&m2=[ММ2]&y2=[ГГГГ2]&separator=%2C&data_format=EXCEL&header=1";
	
	Замены = Новый Соответствие;
	Замены.Вставить("ТИКЕР", ?(ПустаяСтрока(Тикер), "NULL", СокрЛП(Тикер)));
	Замены.Вставить("ДД1", Формат(Дата1, "ДФ=dd"));
	Замены.Вставить("ММ1", Формат(Дата1, "ДФ=MM"));
	Замены.Вставить("ГГГГ1", Формат(Дата1, "ДФ=yyyy"));
	Замены.Вставить("ДД2", Формат(Дата2, "ДФ=dd"));
	Замены.Вставить("ММ2", Формат(Дата2, "ДФ=MM"));
	Замены.Вставить("ГГГГ2", Формат(Дата2, "ДФ=yyyy"));
	
	Для Каждого КлючИЗначение Из Замены Цикл
		АдресСтраницы = СтрЗаменить(АдресСтраницы, "[" + КлючИЗначение.Ключ + "]", КлючИЗначение.Значение);
	КонецЦикла; 
	
	УРЛ = "http://" + Сервер + АдресСтраницы;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	HTTPСоединение = Новый HTTPСоединение(Сервер);
	HTTPЗапрос = Новый HTTPЗапрос(АдресСтраницы);
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос, ИмяВременногоФайла);
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сервер " + Сервер + " вернул код ошибки " + HTTPОтвет.КодСостояния);
		Возврат;
	КонецЕсли; 
	
	ЗагрузитьФайлНаКлиенте(ИмяВременногоФайла);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ЗагрузитьФайлНаКлиенте(ИмяФайлаCSV);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьССайтаМосбиржи(Команда)
	
	Дата1 = Период.ДатаНачала;
	Дата2 = Период.ДатаОкончания;
	
	Сутки = 24 * 60 * 60;
	
	МассивИдРежимовТоргов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИдентификаторыРежимовТоргов);
	Если МассивИдРежимовТоргов.Количество() = 0 Тогда
		МассивИдРежимовТоргов = Новый Массив;
		МассивИдРежимовТоргов.Добавить("TQBR"); // Т+: Акции и ДР - безадрес.
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла);
	ЗаписьТекста.ЗаписатьСтроку("DATE,TICKER,CLOSE");
	
	ТекДата = Дата1;
	Пока ТекДата <= Дата2 Цикл
		Для Каждого ИдРежимаТоргов Из МассивИдРежимовТоргов Цикл
			СохранитьДанныеМосбиржиЗаДатуВФайл(ЗаписьТекста, ИдРежимаТоргов, ТекДата);
		КонецЦикла;
		ТекДата = ТекДата + Сутки;
	КонецЦикла;
	
	ЗаписьТекста.Закрыть();
	
	ЗагрузитьФайлНаКлиенте(ИмяВременногоФайла);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеМосбиржиЗаДатуВФайл(ЗаписьТекста, ИдРежимаТоргов, ТекДата)	
	
	// /iss/history/engines/[engine]/markets/[market]/boards/[board]/securities
	// (https://iss.moex.com/iss/reference/64)
	// TQBR(example):
	// http://iss.moex.com/iss/history/engines/stock/markets/shares/boards/tqbr/securities?date=2020-08-03
	
	Сервер = "iss.moex.com";
	АдресСтраницы = "/iss/history/engines/stock/markets/shares/boards/[ИдРежимаТоргов]/securities.json?date=[ГГГГ]-[ММ]-[ДД]";
	АдресСтраницы = АдресСтраницы + "&iss.meta=off"; // отключаем вывод мета-информации
	АдресСтраницы = АдресСтраницы + "&history.columns=TRADEDATE,SECID,[ИмяКолонкиЦенаЗакрытия]"; // выводим только нужные нам колонки
	АдресСтраницы = АдресСтраницы + "&iss.json=extended"; // используем расширенный формат json
	
	ИмяКолонкиЦенаЗакрытия = "LEGALCLOSEPRICE";
	
	Замены = Новый Соответствие;
	Замены.Вставить("ИдРежимаТоргов", ИдРежимаТоргов);
	Замены.Вставить("ИмяКолонкиЦенаЗакрытия", ИмяКолонкиЦенаЗакрытия);
	Замены.Вставить("ДД", Формат(ТекДата, "ДФ=dd"));
	Замены.Вставить("ММ", Формат(ТекДата, "ДФ=MM"));
	Замены.Вставить("ГГГГ", Формат(ТекДата, "ДФ=yyyy"));
	
	Для Каждого КлючИЗначение Из Замены Цикл
		АдресСтраницы = СтрЗаменить(АдресСтраницы, "[" + КлючИЗначение.Ключ + "]", КлючИЗначение.Значение);
	КонецЦикла; 
	
	ЕстьСледующаяПорцияДанных = Истина;
	КолвоПрочитано = 0;
	Старт = 0;
	Пока ЕстьСледующаяПорцияДанных Цикл
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		
		ТекАдресСтраницы = АдресСтраницы + ?(Старт > 0, "&start=" + Формат(Старт, "ЧГ="), "");
		
		HTTPСоединение = Новый HTTPСоединение(Сервер);
		HTTPЗапрос = Новый HTTPЗапрос(ТекАдресСтраницы);
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос, ИмяВременногоФайла);
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сервер " + Сервер + " вернул код ошибки " + HTTPОтвет.КодСостояния);
			Возврат;
		КонецЕсли;
		
		ЕстьСледующаяПорцияДанных = Ложь;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяВременногоФайла);
		ДокументJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
		Для Каждого Раздел Из ДокументJSON Цикл
			history = Раздел.Получить("history");
			Если history <> Неопределено Тогда
				Для Каждого СтрокаТаблицы Из history Цикл
					Стр		= ""
							+ СтрокаТаблицы.Получить("TRADEDATE") + ","
							+ СтрокаТаблицы.Получить("SECID") + ","
							+ Формат(СтрокаТаблицы.Получить(ИмяКолонкиЦенаЗакрытия), "ЧРД=.; ЧН=; ЧГ=");
					ЗаписьТекста.ЗаписатьСтроку(Стр);
					КолвоПрочитано = КолвоПрочитано + 1;
				КонецЦикла;
			КонецЕсли;
			history_cursor = Раздел.Получить("history.cursor");
			Если history_cursor <> Неопределено Тогда
				hs_INDEX	= history_cursor[0].Получить("INDEX");
				hs_PAGESIZE	= history_cursor[0].Получить("PAGESIZE");
				hs_TOTAL	= history_cursor[0].Получить("TOTAL");
				ЕстьСледующаяПорцияДанных = ( (hs_INDEX + hs_PAGESIZE) < hs_TOTAL );
				Старт = Старт + hs_PAGESIZE;
			КонецЕсли;
		КонецЦикла;
		
		ЧтениеJSON.Закрыть();
		
		УдалитьФайлы(ИмяВременногоФайла);

	КонецЦикла;
	
КонецПроцедуры	


&НаКлиенте
Процедура ЗагрузитьФайлНаКлиенте(ИмяФайлаКотировок)
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаКотировок);
	АдресФайлаКотировок = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	ЗагрузитьФайлНаСервере(АдресФайлаКотировок);
	
	УдалитьИзВременногоХранилища(АдресФайлаКотировок);
	
	ПоказатьОповещениеПользователя("Загрузка котировок завершена!");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьФайлНаСервере(АдресФайлаКотировок)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаКотировок);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	АртикулыНоменклатуры = Новый Соответствие; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Артикул
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И Номенклатура.Артикул <> """"";
	Если НЕ ПустаяСтрока(Тикер) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И Номенклатура.Артикул = &Тикер";
		Запрос.УстановитьПараметр("Тикер", Тикер);
	КонецЕсли; 
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ПустаяСтрока(Выборка.Артикул) Тогда
			Продолжить;
		КонецЕсли; 
		АртикулыНоменклатуры.Вставить(Выборка.Артикул, Выборка.Ссылка);
	КонецЦикла; 
	
	ЧтениеТекста = Новый ЧтениеТекста;
	ЧтениеТекста.Открыть(ИмяВременногоФайла);
	
	НомСтр = 0;
	
	НомераКолонок = Новый Структура;
	ПолеТикер = "TICKER";
	ПолеДата = "DATE";
	ПолеЦена = "CLOSE";
	
	Пока Истина Цикл
		
		Стр = ЧтениеТекста.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли; 
		
		НомСтр = НомСтр + 1;
		
		Если ПустаяСтрока(Стр) Тогда
			Продолжить;
		КонецЕсли; 
		
		НачалоСообщенияОбОшибке = "Ошибка формата файла! Строка #" + НомСтр + ": ";
		
		МассивКомпонент = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр, ",");
		
		Если НомСтр = 1 Тогда
			// в первой строке заголовки
			Для Сч = 0 По МассивКомпонент.Количество() - 1 Цикл
				ТекКомпонент = МассивКомпонент[Сч];
				Если ТекКомпонент = ПолеТикер Тогда
					НомераКолонок.Вставить("Тикер", Сч);
				ИначеЕсли ТекКомпонент = ПолеДата Тогда
					НомераКолонок.Вставить("Дата", Сч);
				ИначеЕсли ТекКомпонент = ПолеЦена Тогда
					НомераКолонок.Вставить("Цена", Сч);
				КонецЕсли; 
			КонецЦикла;
			Если НЕ НомераКолонок.Свойство("Тикер") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НачалоСообщенияОбОшибке + " В заголовке не найдено поле " + ПолеТикер + "!");
				Прервать;
			КонецЕсли; 
			Если НЕ НомераКолонок.Свойство("Дата") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НачалоСообщенияОбОшибке + " В заголовке не найдено поле " + ПолеДата + "!");
				Прервать;
			КонецЕсли; 
			Если НЕ НомераКолонок.Свойство("Цена") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НачалоСообщенияОбОшибке + " В заголовке не найдено поле " + ПолеЦена + "!");
				Прервать;
			КонецЕсли; 
		Иначе 
			ТекТикер = МассивКомпонент[НомераКолонок.Тикер];
			ТекНоменклатура = АртикулыНоменклатуры.Получить(ТекТикер);
			Если ТекНоменклатура = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			ТекДата = Дата(СтрЗаменить(МассивКомпонент[НомераКолонок.Дата], "-", ""));
			СтрЦена = МассивКомпонент[НомераКолонок.Цена];
			Если ПустаяСтрока(СтрЦена) Тогда
				Продолжить;
			КонецЕсли;
			ТекЦена = Число(СтрЦена);
			
			НЗ = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
			НЗ.Период = ТекДата;
			НЗ.ВидЦен = ВидЦен;
			НЗ.Номенклатура = ТекНоменклатура;
			НЗ.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			НЗ.Цена = ТекЦена;
			НЗ.Актуальность = Истина;
			НЗ.Записать();
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Тикер = " + ТекТикер + "; Дата = " + ТекДата + "; Цена = " + ТекЦена);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ЧтениеТекста.Закрыть();
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ВидЦен = Справочники.ВидыЦен.Учетная;
	
	ИдентификаторыРежимовТоргов = "TQBR,TQTF";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Период) КАК Период
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	НЕ ЦеныНоменклатурыСрезПоследних.Номенклатура.Артикул ПОДОБНО """"";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если ЗначениеЗаполнено(Выборка.Период) Тогда
			Период.ДатаНачала = Выборка.Период + 24*60*60;
		КонецЕсли;
	КонецЕсли;
	Период.ДатаОкончания = ТекущаяДатаСеанса();
	Если НЕ ЗначениеЗаполнено(Период.ДатаНачала) Тогда
		Период.ДатаНачала = НачалоМесяца(Период.ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ИмяФайлаCSVНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.ПолноеИмяФайла = ИмяФайлаCSV;
	ДиалогВыбора.Фильтр = "CSV-файлы (*.csv)|*.csv|Все файлы (*.*)|*.*|";
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ИмяФайлаCSVЗавершениеВыбора", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогВыбора.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаCSVЗавершениеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		ИмяФайлаCSV = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры